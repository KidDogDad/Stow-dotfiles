;; -*- olivetti-mode: nil; -*-

#+title: Config
#+property: header-args :tangle config.el
#+auto_tangle: t
#+startup: show2levels

* Lexical Binding

  #+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
  #+end_src


* Basic Appearance

** Splash Image

#+begin_src emacs-lisp
(setq fancy-splash-image "/home/josh/Pictures/doom-banners/splashes/doom/doom-emacs-white.svg")
#+end_src

** Theme & Line Settings

#+begin_src emacs-lisp
(setq doom-theme 'catppuccin)
(setq catppuccin-flavor 'mocha)
(setq display-line-numbers-type nil)
(setq global-hl-line-modes nil)
(remove-hook 'prog-mode-hook #'hl-line-mode)
(remove-hook 'text-mode-hook #'hl-line-mode)
#+end_src

*** Catppuccin Customizations

 #+begin_src emacs-lisp
(custom-theme-set-faces! 'catppuccin
  `(org-document-title :foreground ,(catppuccin-color 'lavender))
  `(org-level-1 :foreground ,(catppuccin-color 'lavender))
  `(org-level-2 :foreground ,(catppuccin-color 'mauve))
  `(org-level-3 :foreground ,(catppuccin-color 'blue))
  `(org-level-4 :foreground ,(catppuccin-color 'teal))
  `(org-level-5 :foreground ,(catppuccin-color 'green))
  `(org-level-6 :foreground ,(catppuccin-color 'yellow))
  `(org-level-7 :foreground ,(catppuccin-color 'peach))
  `(org-level-8 :foreground ,(catppuccin-color 'rosewater))
  `(org-todo :foreground ,(catppuccin-color 'green))
  `(org-quote :foreground ,(catppuccin-color 'mauve))
  `(italic :slant italic :foreground ,(catppuccin-color 'pink))
  `(bold :weight bold :foreground ,(catppuccin-color 'sky))
  `(org-link :inherit link :foreground ,(catppuccin-color 'blue))
  )
#+end_src

** Initial Frame Setup

#+begin_src emacs-lisp
(setf (alist-get 'width default-frame-alist) '(text-pixels . 1626))
(setf (alist-get 'height default-frame-alist) '(text-pixels . 1016))
(setf (alist-get 'width initial-frame-alist) '(text-pixels . 1626))
(setf (alist-get 'height initial-frame-alist) '(text-pixels . 1016))
#+end_src

** Font Settings

#+begin_src emacs-lisp
(setq
 doom-font (font-spec :family "iA Writer Mono S" :size 11.0 :weight 'regular)
 doom-variable-pitch-font (font-spec :family "iA Writer Quattro V" :weight 'regular :size 11.0))

(custom-set-faces!
  '(bold :weight bold)
  '(org-bold :weight bold)
  )

;; Increase line spacing
;; org-modern-mode tries to adjust the tag label display based on the value of line-spacing. This looks best if line-spacing has a value between 0.1 and 0.4 in the Org buffer. Larger values of line-spacing are not recommended, since Emacs does not center the text vertically
(setq-default line-spacing 0.1)

;; Fallbacks to ensure that all-the-icons display appropriately
(set-fontset-font t 'unicode "file-icons" nil 'append)
(set-fontset-font t 'unicode "all-the-icons" nil 'append)
(set-fontset-font t 'unicode "Material Icons" nil 'append)
(set-fontset-font t 'unicode "FontAwesome" nil 'append)
(set-fontset-font t 'unicode "weathericons" nil 'append)
#+end_src

** The Scroll Bar Is Ugly

#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src

** And I've Decided The Window Divider Is Too

#+begin_src emacs-lisp
(window-divider-mode -1)
#+end_src

** Olivetti

#+begin_src emacs-lisp
(use-package! olivetti
  :config
  (map!
   :leader
   :prefix "t"
   :desc "Toggle Olivetti" "o" #'olivetti-mode
   )
  :custom
  (setq olivetti-body-width 100)
  ;; (setq olivetti-style 'margins)
  (setq olivetti-style 'fancy)
  :hook
  (org-mode . olivetti-mode)
  )
#+end_src

** Spacious Padding (Commented Out)

   #+begin_src emacs-lisp
;; (use-package! spacious-padding)

;; ;; These are the default values, but I keep them here for visibility.
;; (setq spacious-padding-widths
;;       '( :internal-border-width 10
;;          :header-line-width 4
;;          :mode-line-width 1
;;          :tab-width 4
;;          :right-divider-width 25
;;          :scroll-bar-width 8
;;          :fringe-width 10))

;; ;; Read the doc string of `spacious-padding-subtle-mode-line' as it
;; ;; is very flexible and provides several examples.
;; (setq spacious-padding-subtle-frame-lines nil)
;;       ;; `( :mode-line-active 'default
;;       ;;    :mode-line-inactive vertical-border))

;; (spacious-padding-mode 1)

;; ;; Set a key binding if you need to toggle spacious padding.
;; (define-key global-map (kbd "<f8>") #'spacious-padding-mode)
#+end_src


** Colorize Hex Values In Org

#+begin_src emacs-lisp
(defun my/org-hex-face ()
  (let* ((hex (match-string-no-properties 0))
         (rgb (color-name-to-rgb hex))
         (lum (when rgb (+ (* 0.2126 (nth 0 rgb))
                           (* 0.7152 (nth 1 rgb))
                           (* 0.0722 (nth 2 rgb)))))
         (fg (if (and lum (< lum 0.5)) "white" "black")))
    `(:background ,hex :foreground ,fg)))
(defun my/org-colorize-hex ()
  (font-lock-add-keywords
   nil
   `((,(rx "#" (= 6 xdigit))
      (0 (my/org-hex-face) prepend))) ; apply face to the hex text
   'append)
  (font-lock-flush))
(add-hook 'org-mode-hook #'my/org-colorize-hex)
#+end_src

* Behavior

** WTF Is Electric-Indent-Mode For

#+begin_src emacs-lisp
(add-hook 'text-mode-hook (lambda () (electric-indent-local-mode -1)))
#+end_src

** Dired

#+begin_src emacs-lisp
;; (dired-hide-details-mode 1)
#+end_src

** Scrolling

#+begin_src emacs-lisp
(setq scroll-conservatively 5)
(pixel-scroll-precision-mode 1)
#+end_src

** Scroll-On-Jump

#+begin_src emacs-lisp
(use-package! scroll-on-jump
  :config
  (setq scroll-on-jump-duration 0.2)
  ;; Stop scroll-on-jump from touching comment ops
  (dolist (fn '(evilnc-comment-or-uncomment-lines
                evilnc-comment-operator
                comment-line
                comment-dwim))
    (ignore-errors (scroll-on-jump-advice-remove fn)))
  )

(after! evil
  (scroll-on-jump-advice-add evil-undo)
  (scroll-on-jump-advice-add evil-redo)
  (scroll-on-jump-advice-add evil-jump-item)
  (scroll-on-jump-advice-add evil-jump-forward)
  (scroll-on-jump-advice-add evil-jump-backward)
  (scroll-on-jump-advice-add evil-ex-search-next)
  (scroll-on-jump-advice-add evil-ex-search-previous)
  (scroll-on-jump-advice-add evil-forward-paragraph)
  (scroll-on-jump-advice-add evil-backward-paragraph)
  (scroll-on-jump-advice-add evil-goto-mark)

  ;; Actions that themselves scroll.
  (scroll-on-jump-with-scroll-advice-add evil-goto-line)
  (scroll-on-jump-with-scroll-advice-add evil-scroll-down)
  (scroll-on-jump-with-scroll-advice-add evil-scroll-up)
  ;; (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-center)
  ;; (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-top)
  ;; (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-bottom)
  )
#+end_src

** Chinese Stuff (Commented Out)

*** Use Fcitx5

 #+begin_src emacs-lisp
;; (setq fcitx-remote-command "fcitx5-remote")
 #+end_src

*** Fix Pinyin Minibuffer Issues

#+begin_src emacs-lisp
;; Keep Orderless simple; no fancy builders that expand to huge regexps.
;; (after! orderless
;;   (setq orderless-matching-styles
;;         '(orderless-literal orderless-initialism orderless-regexp))

;;   ;; If the Chinese module added a pinyin dispatcher, drop it.
;;   (when (boundp 'orderless-style-dispatchers)
;;     (require 'cl-lib)
;;     (setq orderless-style-dispatchers
;;           (cl-remove-if (lambda (fn)
;;                           (string-match-p "pinyin" (symbol-name fn)))
;;                         orderless-style-dispatchers))))
#+end_src

** Evil-Escape

#+begin_src emacs-lisp
(setq evil-escape-key-sequence "jk")
(setq evil-escape-unordered-key-sequence t)
#+end_src

** GPTel

#+begin_src emacs-lisp
(use-package! gptel
 :config
 (setq! gptel-api-key
        (auth-source-pick-first-password :host "api.openai.com"))
 (setq gptel-default-mode 'org-mode)
 :hook
 (gptel-mode . (lambda () (olivetti-mode -1)))
 )
#+end_src

** Info+

   #+begin_src emacs-lisp
(use-package! info+
  :ensure t)
#+end_src

** Keybindings & Keyboard

*** General

 #+begin_src emacs-lisp
;; Save my pinkies
(map! :after evil :map general-override-mode-map
      :nv "zj" #'evil-scroll-down
      :nv "zk" #'evil-scroll-up
      :nv "E" #'evil-end-of-line
      :nv "B" #'evil-first-non-blank
      :nv "ga" #'evil-avy-goto-line
      )

(map!
 :map general-override-mode-map
 :leader
 :desc "Dirvish" "d" #'dirvish-dwim)

(setq evil-auto-indent nil)
 #+end_src

** Delete To Trash Can

   #+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files")
#+end_src

** Ace-Window

#+begin_src emacs-lisp
(after! ace-window
  (map!
   :leader
   :prefix "w"
   :desc "Ace-Window" "a" #'ace-window)
  (custom-set-faces!
    '(aw-leading-char-face
      :foreground "#cdd6f4" :background "#f38ba8"
      :weight bold :height 1.5 :box (:line-width 5 :color "#f38ba8")))
  )
#+end_src

** Interactive Window Resizing

#+begin_src emacs-lisp
(use-package! windresize
  :config
  (map!
   :leader
   :prefix "w"
   :desc "Resize Window" "r" #'windresize)
  (setq windresize-modifiers
        '((meta)            ; select window
          (meta control)    ; move the up/left border (instead of bottom/right)
          (meta shift)      ; move window while keeping the width/height
          (control)))       ; temporarily negate the increment value
  )
#+end_src

** Autosave With Super-Save

#+begin_src emacs-lisp
(use-package! super-save
  :config
  (super-save-mode +1)
  :custom
  (super-save-auto-save-when-idle t)
  (super-save-all-buffers t)
  (super-save-delete-trailing-whitespace t)
)

;; Turn off default auto-save in favor of super-save
(setq auto-save-default nil)

(add-to-list 'super-save-hook-triggers 'org-agenda-quit)
(add-to-list 'super-save-triggers 'org-agenda-quit)
#+end_src

** Speed Up Which-Key

#+begin_src emacs-lisp
(setq which-key-idle-delay 0.3)
(setq which-key-idle-secondary-delay 0.05)
#+end_src

** Settings For Evil-Surround

#+begin_src emacs-lisp
;; Evil-surround stuff
(after! evil-surround
  (defun evil-surround-source-block ()
    "Wrap selection in source block as input in minibuffer"
    (let ((fname (evil-surround-read-from-minibuffer "Source block type: " "")))
      (cons (format "#+begin_src %s" (or fname ""))
            "#+end_src"))
    )

  ;; This isn't working and I can't for the life of me figure out why
  ;; (defun evil-surround-after-block ()
  ;;   "Read a mode name from the minibuffer and wrap selection an after! block for that mode"
  ;;   (let ((fname (evil-surround-read-from-minibuffer "Mode name: " "")))
  ;;     (cons (format "(after! %s" (or fname ""))
  ;;           ")"))
  ;;   )

  (push '(?\" . ("“" . "”")) evil-surround-pairs-alist)
  (push '(?\' . ("‘" . "’")) evil-surround-pairs-alist)
  (push '(?b . ("*" . "*")) evil-surround-pairs-alist)
  (push '(?* . ("*" . "*")) evil-surround-pairs-alist)
  (push '(?i . ("/" . "/")) evil-surround-pairs-alist)
  (push '(?/ . ("/" . "/")) evil-surround-pairs-alist)
  (push '(?= . ("=" . "=")) evil-surround-pairs-alist)
  (push '(?~ . ("~" . "~")) evil-surround-pairs-alist)
  (push '(?s . evil-surround-source-block) evil-surround-pairs-alist)
  ;; (push '(?a . evil-surround-after-block) evil-surround-pairs-alist)
  )
#+end_src

** Embed Files With Org-Transclusion

#+begin_src emacs-lisp
(use-package! org-transclusion
  :after org
  :init
  (map!
   :leader
   :prefix "t"
   :desc "Toggle Org Transclusion" "t" #'org-transclusion-mode)
  (map!
   :leader
   :prefix "n r"
   :desc "Add Org Transclusion" "t" #'org-transclusion-add)
  :hook
  (org-mode . org-transclusion-mode)
  )
#+end_src

** Make Copy-Paste Sane
This configuration replicates the "cutlass" behavior from Neovim.

1. Deletions (`d`, `c`, `x` in normal mode) do NOT go to the kill ring.
2. A specific "cut" operation (`x` in visual mode) DOES go to the kill ring.
3. All "yank" (copy) operations continue to go to the kill ring.
4. The Emacs kill-ring is synced with the system clipboard.

#+begin_src emacs-lisp
(after! evil
  ;; This advice intercepts `evil-delete` and changes the register to `_`.
  (defun bb/evil-delete (orig-fn beg end &optional type _ &rest args)
    (apply orig-fn beg end type ?_ args))
  (advice-add 'evil-delete :around 'bb/evil-delete)

  ;; I also need to intercept 'evil-org-delete-char'
  ;; (defun bb/evil-delete (orig-fn beg end &optional type _ &rest args)
  ;;   (apply orig-fn beg end type ?_ args))
  ;; (advice-add 'evil-delete :around 'bb/evil-delete)

  ;; This function first yanks the selection to the kill-ring/clipboard,
  ;; then deletes it. The delete operation will use the black hole register
  ;; because of the advice above, which is exactly what we want.
  (defun custom-yank-and-delete (beg end)
    "Yank the region, then delete it."
    (interactive "r")
    (evil-yank beg end)
    (evil-delete beg end))

  ;; Bind 'x' in visual mode to this new "yank and delete" command.
  (map! :after evil :map general-override-mode-map
        :v "x" #'custom-yank-and-delete)
  )
#+end_src

** Default Shell
Avoid problems from using fish shell, but still allow Emacs terminal emulators to use fish.

#+begin_src emacs-lisp
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell "/usr/bin/fish")
(setq-default explicit-shell-file-name "/usr/bin/fish")
#+end_src

** Dirvish

#+begin_src emacs-lisp
(after! dirvish
  (setq! dirvish-quick-access-entries
         `(("h" "~/"                          "Home")
           ("e" ,user-emacs-directory         "Emacs user directory")
           ("c" "~/code/"                     "Code")
           ("d" "~/Downloads/"                "Downloads")
           ("m" "/mnt/"                       "Mounted drives")
           ("t" "~/.local/share/Trash/files/" "Trash")))
  (setq dirvish-hide-details t)
  (setq dirvish-attributes
        (append
         ;; The order of these attributes is insignificant, they are always
         ;; displayed in the same position.
         '(vc-state subtree-state nerd-icons)
         ;; Other attributes are displayed in the order they appear in this list.
         '(file-size))
        )
  (setq dirvish-override-dired-mode t)
  )
;; (custom-set-faces!
;;   '(dirvish-hl-line :weight bold)
;;   )
#+end_src


* Org

** Org-Protocol

   #+begin_src emacs-lisp
(require 'org-protocol)
(require 'org-web-tools)
#+end_src

** Define Stuck Projects (Commented Out)

#+begin_src emacs-lisp
;; (setq org-stuck-projects
;;       '("TODO=\"PROJ\"&-TODO=\"DONE\"" ("TODO") nil ""))
#+end_src

** Org Font & Appearance Settings

#+begin_src emacs-lisp
(custom-set-faces!
  ;; Font sizes
  '(org-document-title :height 1.5 :weight black)
  '(org-date :inherit org-meta-line)
  '(org-level-1 :height 1.4 :weight bold)
  '(org-level-2 :height 1.3 :weight bold)
  '(org-level-3 :height 1.2 :weight bold)
  '(org-level-4 :height 1.2 :weight bold)
  '(org-level-5 :height 1.2 :weight bold)
  '(org-level-6 :height 1.2 :weight bold)
  '(org-level-7 :height 1.2 :weight bold)
  '(org-level-8 :height 1.2 :weight bold)
  )
#+end_src

** Org Setup

#+begin_src emacs-lisp
(use-package! org
  :ensure nil
  :config
  (setq org-directory "~/org"
        org-ellipsis " >"
        org-auto-align-tags nil
        org-cycle-separator-lines 1
        org-pretty-entities t
        org-startup-indented t
        org-startup-truncated nil
        org-adapt-indentation t
        org-special-ctrl-a/e nil
        org-M-RET-may-split-line '((item . nil))
        org-fold-catch-invisible-edits 'smart
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t
        org-fontify-quote-and-verse-blocks t
        org-fontify-done-headline nil
        org-fontify-whole-heading-line t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 0
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-blank-before-new-entry '((heading . t) (plain-list-item . nil))
        )
  )
#+end_src

** Org-Capture

#+begin_src emacs-lisp
(use-package! org-capture
  :ensure nil
  :config
  (add-hook 'org-capture-mode-hook
            (lambda nil
              (setq-local header-line-format nil)))
  (setq org-capture-templates
        '(("t" "Todo" entry (file "~/org/agenda/20250814T155838--inbox.org")
           "* TODO %?")
          ("c" "Clipboard Todo" entry (file "~/org/agenda/20250814T155838--inbox.org")
           "* TODO %?\n%(string-trim (shell-command-to-string \"wl-paste -n\"))")
          ("o" "bin/org-capture Todo" entry (file "~/org/agenda/20250814T155838--inbox.org")
           "* TODO %?\n%(string-trim (shell-command-to-string \"wl-paste -n\"))\n")
          ("e" "Emacs Todo" entry (file "~/org/agenda/20250811T110445--emacs-todos__agenda_emacs.org")
           "* TODO %? :emacs:\n")
          ("y" "Yiyi Todo" entry (file "~/org/agenda/20250814T095858--yiyi-todos__agenda_yiyi.org")
           "* TODO Yiyi: %? :yiyi:\n"))
        )
  )
#+end_src

** Todo States

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence
         "TODO(t)"
         "WAIT(w)"
         "PROJ(p)"
         "SOMEDAY(s)"
         "BACKLOG(b)"
         "SCRIPTING(s)"
         "|"
         "DONE(d)"
         "CANCELED(c)"))
      )
#+end_src

** Org-Modern

   #+begin_src emacs-lisp
(after! org-modern
  (setq org-modern-list '((43 . "•")
                     (45 . "•")))
  (setq org-modern-star nil)
  (setq org-modern-hide-stars t)
  )
#+end_src

** Agenda

*** Agenda Files

#+begin_src emacs-lisp
(setq org-agenda-files (list (concat org-directory "/agenda")))
#+end_src

*** Agenda View Settings
 Some settings taken from [[https:www.youtube.com/watch?v=a_WNtuefREM][this YouTube video]]

     #+begin_src emacs-lisp
(use-package! all-the-icons)

(use-package! org-agenda
  :ensure nil
  :config
  (setq org-agenda-start-day "+0d"
        org-agenda-span 'day
        org-agenda-timegrid-use-ampm t
        org-agenda-tags-column 0
        org-agenda-todo-ignore-scheduled 'future
        org-agenda-todo-ignore-deadlines 'far
        org-agenda-tags-todo-honor-ignore-options t
        org-agenda-dim-blocked-tasks nil
        org-agenda-use-tag-inheritance nil
        org-agenda-inhibit-startup t
        org-agenda-ignore-properties '(stats)
        org-agenda-window-setup 'current-window
        org-agenda-restore-windows-after-quit t
        org-log-done 'time
        org-log-into-drawer t
        org-agenda-include-deadlines t
        org-agenda-breadcrumbs-separator " ❱ "
        org-agenda-todo-keyword-format "%-1s"
        org-agenda-use-time-grid t
        org-agenda-skip-timestamp-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-hide-tags-regexp ".*"
        org-agenda-skip-deadline-if-done t
        org-agenda-show-future-repeats nil
        org-agenda-block-separator nil
        org-agenda-current-time-string "<──────── now"
        org-agenda-time-grid '((today require-timed remove-match) () "      " "──────────────")

        org-agenda-prefix-format
        '((agenda . "    %?-2i%t ")
          (todo . "  %?-2i%t ")
          (tags . "  %?-2i%t ")
          (search . " %i %-12:c"))

        org-agenda-custom-commands
        '(("y" "Yiyi Tasks"
           ((tags-todo "yiyi")))
          ("i" "Inbox"
           ((todo "" ((org-agenda-files '("~/org/agenda/20250814T155838--inbox.org"))
                      (org-agenda-overriding-header "Inbox Items")))))
          ("e" "Emacs"
           ((tags-todo "+emacs"
                       ((org-agenda-overriding-header "Emacs Tasks 🤓")))))
          ("T" "This Week"
           ((agenda ""
                    (
                     (org-agenda-remove-tags t)
                     (org-agenda-scheduled-leaders '("" "Sched.%2dx: "))
                     (org-agenda-deadline-leaders '("Deadline:  " "In %3d d.: " "%2d d. ago: "))
                     (org-agenda-overriding-header "Calendar")
                     (org-agenda-time-grid (quote ((today require-timed remove-match) () "      " "┈┈┈┈┈┈┈┈┈┈┈┈┈")))
                     ))
            (tags-todo "thisweek"
                       ((org-agenda-overriding-header "\nThis Week"))))
            ((org-agenda-remove-tags t)))
          ("W" "Weekend"
           ((agenda ""
                    (
                     (org-agenda-remove-tags t)
                     (org-agenda-scheduled-leaders '("" "Sched.%2dx: "))
                     (org-agenda-deadline-leaders '("Deadline:  " "In %3d d.: " "%2d d. ago: "))
                     (org-agenda-overriding-header "Calendar")
                     (org-agenda-time-grid (quote ((today require-timed remove-match) () "      " "┈┈┈┈┈┈┈┈┈┈┈┈┈")))
                     ))
            (tags-todo "weekend"
                       ((org-agenda-overriding-header "\nWeekend"))))
            ((org-agenda-remove-tags t)))
          ("A" "Main agenda"
           ((agenda ""
                    (
                     (org-agenda-remove-tags t)
                     (org-agenda-todo-keyword-format "")
                     (org-agenda-scheduled-leaders '("" "Sched.%2dx: "))
                     (org-agenda-deadline-leaders '("Deadline:  " "In %3d d.: " "%2d d. ago: "))
                     (org-agenda-overriding-header "Calendar")
                     (org-agenda-time-grid (quote ((today require-timed remove-match) () "      " "┈┈┈┈┈┈┈┈┈┈┈┈┈")))
                     ))
            (tags-todo "thisWeek"
                       ((org-agenda-overriding-header "\nThis Week")))
            (tags-todo "weekend"
                       ((org-agenda-overriding-header "\nWeekend"))))
            ((org-agenda-remove-tags t)))
          )

        org-agenda-sorting-strategy '((agenda time-up ts-up urgency-down)
                                      (todo priority-down)
                                      (tags priority-down)
                                      (search category-keep))
        )

  (custom-set-faces!
    `(org-agenda-structure :inherit org-level-2 :foreground ,(catppuccin-color 'lavender))
    `(org-agenda-date :inherit org-level-2 :foreground ,(catppuccin-color 'lavender) :weight bold)
    `(org-agenda-date-weekend-today :inherit org-level-2 :foreground ,(catppuccin-color 'lavender))
    `(org-agenda-date-today :inherit org-level-3 :foreground ,(catppuccin-color 'mauve))
    '(org-scheduled-today :inherit default :foreground nil :weight regular)
    '(org-scheduled :inherit default :foreground nil :weight regular)
    `(org-scheduled-previously :inherit default :weight bold :foreground ,(catppuccin-color 'red))
    `(org-upcoming-deadline :inherit default :foreground ,(catppuccin-color 'peach))
    '(org-agenda-current-time :inherit org-meta-line)
    )
  )

(map! :map org-agenda-mode-map
      "[" #'org-agenda-earlier
      "]" #'org-agenda-later)

(map! :desc "Next line"
      :map org-super-agenda-header-map
      "j" 'org-agenda-next-line)

(map! :desc "Next line"
      :map org-super-agenda-header-map
      "k" 'org-agenda-previous-line)
#+end_src

*** Category Icons

#+begin_src emacs-lisp

(customize-set-value
 'org-agenda-category-icon-alist
 `(
   ("Projects" ,(list (all-the-icons-faicon "tasks" :height 0.9)) nil nil :ascent center)
   ("Home" ,(list (all-the-icons-faicon "home" :v-adjust 0.9)) nil nil :ascent center)
   ("Errands" ,(list (all-the-icons-material "drive_eta" :height 0.9)) nil nil :ascent center)
   ("Inbox" ,(list (all-the-icons-faicon "inbox" :height 0.9)) nil nil :ascent center)
   ("Computer" ,(list (all-the-icons-fileicon "arch-linux" :height 0.9)) nil nil :ascent center)
   ("Coding" ,(list (all-the-icons-faicon "code-fork" :height 0.9)) nil nil :ascent center)
   ("Emacs" ,(list (all-the-icons-fileicon "emacs" :height 0.9)) nil nil :ascent center)
   ("Routines" ,(list (all-the-icons-faicon "repeat" :height 0.9)) nil nil :ascent center)
   ("Yiyi" ,(list (all-the-icons-faicon "female" :height 0.9)) nil nil :ascent center)
   ("Misc" ,(list (all-the-icons-material "widgets" :height 0.9)) nil nil :ascent center)
   ))
#+end_src


** Org Auto Tangle (Commented Out)

#+begin_src emacs-lisp
;; (use-package! org-auto-tangle
;;   :defer t
;;   :hook
;;   (org-mode . org-auto-tangle-mode)
;;   :config
;;   (setq org-auto-tangle-default nil))
#+end_src

** Org Appear

#+begin_src emacs-lisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode))
#+end_src

* Denote

** Denote Base Package

#+begin_src emacs-lisp
(use-package! denote
  :ensure t
  :hook
  ;; Make Denote links clickable
  (text-mode . denote-fontify-links-mode-maybe)
  ;; Apply colors to Denote names in Dired
  (dired-mode . denote-dired-mode)
  (dirvish-setup-hook . denote-dired-mode)
  :config
  (setq denote-directory (expand-file-name "~/org/"))
  (setq denote-file-type 'org)
  (setq denote-dired-directories-include-subdirectories t)
  (setq denote-save-buffers t)
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)
  (setq denote-rename-confirmations '(rewrite-front-matter modify-file-name))
  (setq denote-backlinks-display-buffer-action
        (quote ((display-buffer-reuse-window display-buffer-in-side-window)
                (side . right)
                (slot . 99)
                (window-width . 0.3)
                (dedicated . t)
                (preserve-size . (t . t)))))


  ;; Pick dates, where relevant, with Org's advanced interface:
  (setq denote-date-prompt-use-org-read-date t)

  ;; Automatically rename Denote buffers when opening them so that
  ;; instead of their long file name they have, for example, a literal
  ;; "[D]" followed by the file's title.  Read the doc string of
  ;; `denote-rename-buffer-format' for how to modify this.
  (denote-rename-buffer-mode 1)
  )
#+end_src

** Denote Faces

#+begin_src emacs-lisp
(custom-set-faces!
  `(denote-faces-date :foreground ,(doom-color 'text))
  `(denote-faces-title :foreground ,(catppuccin-color 'lavender))
  `(denote-faces-keywords :foreground ,(catppuccin-color 'red))
  `(denote-faces-link :inherit link :foreground ,(catppuccin-color 'lavender))
  )
#+end_src

** Denote Keybindings

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("n" . "notes")
               (:prefix ("d" . "denote")
                :desc "Rename" "r" #'denote-rename-file
                :desc "Rename using front matter" "R" #'denote-rename-file-using-front-matter
                :desc "Link or create a note" "l" #'denote-link-or-create
                :desc "Add links" "L" #'denote-add-links
                :desc "Backlinks" "b" #'denote-backlinks
                :desc "Denote dired" "D" #'denote-dired
                :desc "Open or create a note" "n" #'denote-open-or-create
                :desc "Goto journal" "j" #'denote-journal-new-or-existing-entry
                :desc "Link or create journal" "J" #'denote-journal-new-or-existing-entry
                :desc "Search notes (ripgrep)" "s" #'consult-denote-grep
                )))

(map! :leader
      (:prefix ("n" . "notes")
               (:prefix ("d" . "denote")
                        (:prefix ("d" . "dynamic blocks")
                         :desc "Backlinks" "b" #'denote-org-dblock-insert-backlinks
                         :desc "Files" "f" #'denote-org-dblock-insert-files
                         :desc "Links" "l" #'denote-org-dblock-insert-links
                         :desc "Update" "u" #'org-dblock-update
                         ))))
#+end_src

** Denote Menu

#+begin_src emacs-lisp
(use-package! denote-menu)
#+end_src

** Denote Journal

#+begin_src emacs-lisp
(use-package! denote-journal
  :ensure t
  :hook (calendar-mode . denote-journal-calendar-mode)
  :config
  ;; Use the "journal" subdirectory of the `denote-directory'. Set this
  ;; to nil to use the `denote-directory' instead.
  (setq denote-journal-directory
        (expand-file-name "journal" denote-directory))
  ;; Default keyword for new journal entries. It can also be a list of
  ;; strings.
  (setq denote-journal-keyword "journal")
  ;; Read the doc string of `denote-journal-title-format'.
  (setq denote-journal-title-format "%Y-%0m-%0d")
  )
#+end_src

** Denote Consult

#+begin_src emacs-lisp
(use-package! consult-denote
  :ensure t
  :bind
  (("C-c n f" . consult-denote-find)
   ("C-c n g" . consult-denote-grep))
  :config
  (consult-denote-mode 1)
  (setq consult-denote-grep-command #'consult-ripgrep)
  )
#+end_src

** Denote Org

Other commands to mess around with:
- denote-org-dblock-insert-files
- denote-org-dblock-insert-links
- denote-org-dblock-insert-backlinks
- denote-org-dblock-insert-missing-links
- denote-org-dblock-insert-files-as-headings

#+begin_src emacs-lisp
(use-package! denote-org
  :ensure t
  :config
  ;; I list the commands here so that you can discover them more
  ;; easily. You might want to bind the most frequently used ones to
  ;; the `org-mode-map'.
  (map! :leader
        (:prefix ("n" . "notes")
                 (:prefix ("d" . "denote")
                  :desc "Extract subtree" "x" #'denote-org-extract-org-subtree
                  :desc "Convert links to denote" "C" #'denote-org-convert-links-to-denote-type
                  )))
  )
#+end_src


** Denote Markdown

#+begin_src emacs-lisp
(use-package denote-markdown
  :ensure t
  ;; Bind these commands to key bindings of your choice.
  ;; :commands ( denote-markdown-convert-links-to-file-paths
  ;;             denote-markdown-convert-links-to-denote-type
  ;;             denote-markdown-convert-links-to-obsidian-type
  ;;             denote-markdown-convert-obsidian-links-to-denote-type )
)
#+end_src

* Apps

** Calendar (Calfw)

#+begin_src emacs-lisp
;; (setq org-gcal-client-id "your-id-foo.apps.googleusercontent.com"
;;       org-gcal-client-secret "your-secret"
;;       org-gcal-fetch-file-alist '(("your-mail@gmail.com" .  "~/schedule.org")
;;                                   ("another-mail@gmail.com" .  "~/task.org")))
;; (require 'org-gcal)
#+end_src

** Mu4e

#+begin_src emacs-lisp
(setq +mu4e-gmail-accounts '(("josh@gilliland.cloud" . "~/.mail/gmail")))

;; Each path is relative to the path of the maildir you passed to mu
(set-email-account! "josh@gilliland.cloud"
  '((mu4e-sent-folder       . "/[Gmail]/Sent Mail")
    (mu4e-drafts-folder     . "/[Gmail]/Drafts")
    (mu4e-trash-folder      . "/[Gmail]/Trash")
    (mu4e-refile-folder     . "/[Gmail]/All Mail")
    )
  t)

(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail)

;; don't need to run cleanup after indexing for gmail
(setq mu4e-index-cleanup nil
      ;; because gmail uses labels as folders we can use lazy check since
      ;; messages don't really "move"
      mu4e-index-lazy-check t)
  )
#+end_src

* Functions

** Logseq Md To Org

#+begin_src emacs-lisp
(defun logseq-md-headings-to-org ()
  "Convert Logseq-style headings to Org headings, removing leading dash and indentation."
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "^\\s-*\\(-\\s-*\\)?\\(#+\\)\\s-+" nil t)
    (let* ((hashes (match-string 2))
           (stars (make-string (length hashes) ?*)))
      (replace-match (concat stars " ") nil t))))
#+end_src

** Markdown Links To Org

   #+begin_src emacs-lisp
(defun markdown-links-to-org (&optional beg end)
  "Convert [text](url) → [[url][text]] in region or whole buffer.
Also unwrap URLs like {{video https://...}}."
  (interactive (if (use-region-p) (list (region-beginning) (region-end))))
  (save-excursion
    (save-restriction
      (when (and beg end) (narrow-to-region beg end))
      (goto-char (point-min))
      (let ((re "\\[\\([^]\n]+\\)\\](\\([^)\n]+\\))"))
        (while (re-search-forward re nil t)
          (let* ((txt (match-string 1))
                 (url (match-string 2)))
            ;; unwrap {{video ...}}
            (when (string-match "\\`{{video[[:space:]]+\\([^}]+\\)}}\\'" url)
              (setq url (match-string 1 url)))
            (replace-match (concat "[[" url "][" txt "]]") t t)))))))
#+end_src
