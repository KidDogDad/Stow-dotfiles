#+title: Unused Config
#+startup: overview

* Font Settings

#+begin_src emacs-lisp
  ;; Other font settings
  ;; '(org-block :inherit fixed-pitch)
  ;; '(org-code :inherit (shadow fixed-pitch))
  '(org-hide :inherit fixed-pitch :weight bold :height 1.3)
  ;; '(org-checkbox :inherit fixed-pitch)
  ;; '(org-document-info-keyword :inherit (shadow fixed-pitch))
  '(org-indent :inherit (org-hide fixed-pitch) :weight bold :height 1.3)
  ;; '(org-meta-line :inherit (font-lock-comment-face fixed-pitch))
  ;; '(org-property-value :inherit fixed-pitch)
  ;; '(org-special-keyword :inherit (font-lock-comment-face fixed-pitch))
  ;; '(org-table :inherit fixed-pitch)
  ;; '(org-tag :inherit (shadow fixed-pitch) :weight bold :height 0.8)
  ;; '(org-verbatim :inherit (shadow fixed-pitch))
#+end_src

* My Attempt At Rougier's Org-Outer-Indent / Brongulus's Version Of It. Never Worked. üò≠

#+begin_src emacs-lisp
(use-package! org
  :ensure nil
  :hook ((org-mode . visual-line-mode)
         (org-mode . my/org-mono-setup))
  :preface
  ;; (defun my/org-mono-reset ()
  ;;   (when (bound-and-true-p my/org-font-remap)
  ;;     (mapc #'face-remap-remove-relative my/org-font-remap)))
  (defun my/org-mono-setup ()
    (variable-pitch-mode -1)  ;; stay monospace in Org
    ;; (setq-local my/org-font-remap
    ;;             (list
    ;;              (face-remap-add-relative 'default '(:family "iA Writer Mono S"))
    ;;              (face-remap-add-relative 'fixed-pitch '(:family "iA Writer Mono S"))
    ;;              (face-remap-add-relative 'org-indent '(:inherit default) :height 1.3)
    ;;              (face-remap-add-relative 'org-hide '(:inherit default) :height 1.3)))
  ;; (add-hook 'kill-buffer-hook #'my/org-mono-reset nil t)
    )
  :config
  (setq org-directory "~/Sync/roam"
        ;; org-use-sub-superscripts '{}
        ;; org-export-with-sub-superscripts nil
        org-ellipsis " >"
        org-pretty-entities t
        org-startup-indented t
        org-startup-truncated nil
        org-adapt-indentation t
        org-special-ctrl-a/e nil
        org-M-RET-may-split-line '((item . nil))
        org-fold-catch-invisible-edits 'show-and-error
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t
        org-fontify-quote-and-verse-blocks t
        org-fontify-done-headline nil
        org-fontify-whole-heading-line t
        org-src-fontify-natively t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-blank-before-new-entry '((heading . t) (plain-list-item . nil))
        )

;; 1 Define per-level star faces = (org-level-N + default)
(defun my/org--define-star-faces ()
  (dotimes (i org-n-level-faces)
    (let* ((n (1+ i))
           (fname (intern (format "my/org-star-%d" n)))
           (hface (intern (format "org-level-%d" n))))
      (make-face fname)
      ;; Heading styling + monospace family from `default`
      (set-face-attribute fname nil :inherit (list hface 'default)))))

;; 2 Font-lock: paint *all* leading stars with the per-level face
(defun my/org--fontify-stars ()
  (font-lock-add-keywords
   nil
   `(( "^\\(\\*+\\)\\s-+"
       (1 (let* ((lvl (length (match-string 1)))
                 (face (intern (format "my/org-star-%d"
                                       (min lvl org-n-level-faces)))))
            face)
          prepend))) ; don‚Äôt clobber other faces
   'append)
  (font-lock-flush))

(add-hook 'org-mode-hook #'my/org--define-star-faces)
(add-hook 'org-mode-hook #'my/org--fontify-stars)

  ;; ;; Taken from rougier: org-outer-indent
  (defun org-outer-indent--compute-prefixes ()
    "Compute prefix strings for regular text and headlines."
    (setq org-indent--heading-line-prefixes
          (make-vector org-indent--deepest-level nil))
    (setq org-indent--inlinetask-line-prefixes
          (make-vector org-indent--deepest-level nil))
    (setq org-indent--text-line-prefixes
          (make-vector org-indent--deepest-level nil))
    ;; Find the lowest headline level (FIXME)
    (let* (;; (headline-levels (or (org-element-map
           ;;                          (org-element-parse-buffer) 'headline
           ;;                        #'(lambda (item)
           ;;                            (org-element-property :level item)))
           ;;                      '()))
           ;; (max-level (seq-max (if headline-levels
           ;;                         headline-levels
           ;;                       '(0))))
           (line-indentation (+ 3 4))
           (headline-indentation))
      (dotimes (level org-indent--deepest-level)
        (setq headline-indentation
              (max 0 (- line-indentation (+ 1 level))))
        (aset org-indent--inlinetask-line-prefixes level
              (make-string line-indentation ?\s))
        (aset org-indent--text-line-prefixes level
              (make-string line-indentation ?\s))
        (aset org-indent--heading-line-prefixes level
              (make-string headline-indentation ?\s))))
    (setq-local org-hide-leading-stars nil))

  (advice-add 'org-indent--compute-prefixes :override
              #'org-outer-indent--compute-prefixes)

  )

(use-package! org-agenda
  :ensure nil
  :config
  (setq org-agenda-files (list org-directory)
        ;; org-agenda-ignore-properties '(effort appt stats category)
        org-agenda-dim-blocked-tasks nil
        org-agenda-use-tag-inheritance nil
        org-agenda-inhibit-startup t
        org-agenda-window-setup 'current-window
        org-agenda-restore-windows-after-quit t
        org-agenda-start-with-log-mode t
        org-agenda-show-all-dates nil
        org-log-done 'time
        org-log-into-drawer t
        org-agenda-include-deadlines t)

  (defun elegant-agenda--title nil ;; src: elegant-agenda-mode
    (when-let* ((title (when (and org-agenda-redo-command
                                  (stringp (cadr org-agenda-redo-command)))
                         (format "‚îÄ  %s "
                                 (mapconcat
                                  #'identity
                                  (split-string-and-unquote
                                   (cadr org-agenda-redo-command) "")
                                  ""))))
                (width (window-width)))
      (face-remap-set-base 'header-line :height 1.4)
      (setq-local header-line-format
                  (format "%s %s" title (make-string (- width (length title)) ?‚îÄ t)))))

  (add-hook 'org-agenda-finalize-hook #'elegant-agenda--title)

  (setq org-agenda-breadcrumbs-separator " ‚ù± "
        org-agenda-todo-keyword-format "%-1s"
        org-agenda-use-time-grid t
        org-agenda-skip-timestamp-if-done t
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-scheduled-leaders '("" "")
        org-agenda-deadline-leaders '("" "")
        org-agenda-todo-keyword-format ""
        org-agenda-block-separator (string-to-char " ")
        org-agenda-current-time-string "‚Üê now ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        org-agenda-time-grid
        '((daily today require-timed remove-matched)
          (800 1200 1600 2000)
          "       " "‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ")
        org-agenda-prefix-format
        '((agenda . " %i %-12b%t%s")
          (todo . " %i %?-12b"))
        org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w)" "PROJ(p)" "SOMEDAY(s)" "BACKLOG(b)" "SCRIPTING(s)" "|" "DONE(d)" "CANCELED(c)"))
        ))

(use-package! org-capture
  :ensure nil
  ;; :hook (org-capture-mode . meow-insert)
  :config
  (add-hook 'org-capture-mode-hook
            (lambda nil
              (setq-local header-line-format nil)))
  (setq org-capture-templates
        '(("t" "Todo" entry (file "~/Sync/roam/agenda/inbox.org")
           "* TODO %?")
          ("T" "Todo (clipboard)" entry (file "~/Sync/roam/agenda/inbox.org")
           "* TODO %? (notes)\n%x")
          ("d" "Todo (document)" entry (file "~/Sync/roam/agenda/inbox.org")
           "* TODO %? (notes)\n%a")
          ("i" "Todo (interactive)" entry (file "~/Sync/roam/agenda/inbox.org")
           "* TODO %? (notes)\n%^C")
          )))
#+end_src

** Org-Outer-Indent

#+begin_src emacs-lisp
;; (use-package! org-outer-indent
;;   :after org
;;   :hook (org-mode . org-outer-indent-mode)
;;   )

;; (add-hook 'org-mode-hook (lambda () (setq-local org-hide-leading-stars nil)))
#+end_src

* Getting Rid Of Org-Roam
** Org-Roam Basic Settings

#+begin_src emacs-lisp
(require 'org-roam-protocol)

(use-package! org-roam
  :custom
  (org-roam-directory "~/org backup (roam version)")
  (org-roam-completion-everywhere nil)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n\n")
      :unnarrowed t)
     ("p" "Project" plain
      "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
      :unnarrowed t)
     ))
  (org-roam-capture-ref-templates
   '(("W" "Web Page (With Content)" plain
      "%(org-web-tools--url-as-readable-org \"${ref}\")"
      :target (file+head "clips/${slug}.org" "#+title: ${title}\n\n")
      :unnarrowed t)
     ("w" "Web Page (Link Only)" plain
      "[[${ref}][${title}]]\n\n%?"
      :target (file+head "clips/${slug}.org" "#+title: ${title}\n\n")
      :unnarrowed t)
     ))

  (org-roam-dailies-directory "~/org backup (roam version)/daily/")

  (org-roam-dailies-capture-templates
   '(("d" "default" entry
      "\n* %?"
      :target (file+head "%<%Y-%m-%d>.org"
                         "#+title: %<%Y-%m-%d>\n"))
     ("y" "Yiyi Check-In" entry
      (file "~/org/templates/daily-note-template.org")
      :target (file+head "%<%Y-%m-%d>.org"
                         "#+title: %<%Y-%m-%d>\n"))
     )
   )
:config
(org-roam-db-autosync-mode +1)
(org-roam-setup)
)
#+end_src

** Org-Roam Keybindings

#+begin_src emacs-lisp
(map! :leader
      :prefix "m m"
      :desc "Extract Subtree" "e" #'org-roam-extract-subtree)
#+end_src

** Org Roam UI

*** Basic Settings

#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

*** Keybindings For Org-Roam-UI

#+begin_src emacs-lisp
(map! :after org-roam-ui
      :leader
      :desc "Org-roam UI"
      "n r u" #'org-roam-ui-open)
(map! :leader
      "n r g" nil)
#+end_src

** Org Roam Buffer Sections

#+begin_src emacs-lisp
(setq org-roam-mode-sections
      (list #'org-roam-backlinks-section
            #'org-roam-reflinks-section
            #'org-roam-unlinked-references-section
            ))
#+end_src

** Org-Roam Immediate Insert
Taken from https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/

   #+begin_src emacs-lisp
(defun my/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args))
  )

;; Keybinding
(map!
:leader
:prefix "n r"
:desc "Insert New Node" "I" #'my/org-roam-node-insert-immediate
 )
   #+end_src

** Searching Org-Roam Files With Consult-Ripgrep
Taken from https://baty.net/2022/searching-org-roam-files/

#+begin_src emacs-lisp
(defun search-roam ()
  "Run consult-ripgrep on the org roam directory"
  (interactive)
  (consult-ripgrep org-roam-directory))

;; Keybinding
(map! :leader
      (:prefix ("s" . "search")
       :desc "Search org-roam files" "R" #'search-roam))
#+end_src

** UNFINISHED Add Pagelink Property To Org Roam Node

#+begin_src emacs-lisp
;; First define a function to do this

;; Then add the keymap
;; (map! :after org-roam :map general-override-mode-map
;;       :leader
;;       :prefix "m m o"
;;       :desc "Add Pagelink" #'org-roam-pagelink-add)
#+end_src

* Org-Modern-Indent

   #+begin_src emacs-lisp
;; (use-package! org-modern-indent
;;   :ensure t
;;   :config
;;   :hook
;;   (org-mode . org-modern-indent-mode)
;;   )

;; (set-face-attribute 'fixed-pitch nil :family "iA Writer Mono S" :height 1.0)
   #+end_src

* Unused Category Icons Settings

#+begin_src emacs-lisp
   ("Projects" "~/.config/doom/icons/checklist.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("Yiyi" "~/.config/doom/icons/chat.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("letter" "~/.config/doom/icons/letter.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("music" "~/.config/doom/icons/music.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("Routines" "~/.config/doom/icons/chore.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("events" "~/.config/doom/icons/events.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("Inbox" "~/.config/doom/icons/inbox.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("walk" "~/.config/doom/icons/walk.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("Misc" "~/.config/doom/icons/chromatic.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("community" "~/.config/doom/icons/community.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("idea" "~/.config/doom/icons/idea.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("man" "~/.config/doom/icons/man.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("scheduled" "~/.config/doom/icons/scheduled.svg" nil nil :ascent center :mask heuristi :height 0.5c)
   ("class" "~/.config/doom/icons/class.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("plant" "~/.config/doom/icons/plant.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("check" "~/.config/doom/icons/check.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("search" "~/.config/doom/icons/search.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("home" "~/.config/doom/icons/home.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("book" "~/.config/doom/icons/book.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("cook" "~/.config/doom/icons/cook.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("Errands" "~/.config/doom/icons/buy.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("Computer" "~/.config/doom/icons/computer.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("archive" "~/.config/doom/icons/archive.svg" nil nil :ascent center :mask heuristic :height 0.5)
   ("Emacs" "~/.config/doom/icons/emacs.svg" nil nil :ascent center :mask heuristic :height 0.5)
#+end_src

* Agenda Helper Function

#+begin_src emacs-lisp
(defun my/set-agenda-window-clean ()
  (setq line-spacing 2)
  (psamim/agenda-color-char)
  (setq mode-line-format nil)
  ;; (mixed-pitch-mode 1)
  ;; (set-frame-parameter nil 'font "Iosevka-18")
  (setq header-line-format " ")
  (set-face-attribute 'header-line nil :background "#00000000")
  (set-window-margins (frame-selected-window) 4))
#+end_src


* Chezmoi Mode

#+begin_src emacs-lisp
(use-package! chezmoi
  :config
  ;; Enable chezmoi mode for dotfiles
  (setq chezmoi-use-magit t)

  ;; Auto-enable for chezmoi managed files
  (add-hook 'find-file-hook
            (lambda ()
              (when (and buffer-file-name
                         (string-match-p "/\\.local/share/chezmoi/" buffer-file-name))
                (chezmoi-mode 1))))

  ;; Key bindings
  (map! :leader
        (:prefix ("z" . "chezmoi")
         :desc "Edit file" "e" #'chezmoi-find
         :desc "Write buffer" "w" #'chezmoi-write
         :desc "Diff" "d" #'chezmoi-diff
         :desc "Apply" "a" #'chezmoi-apply))
)
#+end_src



* Org-QL

#+begin_src emacs-lisp
(use-package! org-ql
  :after org
  :config
  ;; (require 'org-ql)            ;; provides org-dblock-write:org-ql
  ;; (require 'org-ql-view)       ;; (safe) also loads views
  ;; (require 'org-ql-block)
  )
#+end_src
